
### Query su singola tabella

1- Selezionare tutte le software house americane (3)
select *
from software_houses
where country = 'united states'

2- Selezionare tutti i giocatori della città di 'Rogahnland' (2)
select *
from players
where city = 'Rogahnland'

3- Selezionare tutti i giocatori il cui nome finisce per "a" (220)
select *
from players
where name like '%a'

4- Selezionare tutte le recensioni scritte dal giocatore con ID = 800 (11)
select *
from reviews
where player_id = 800

5- Contare quanti tornei ci sono stati nell'anno 2015 (9)
select count(*)
from tournaments
where year = 2015

6- Selezionare tutti i premi che contengono nella descrizione la parola 'facere' (2)
select *
from awards
where description like '%facere%'

7- Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta (del videogioco vogliamo solo l'ID) (287)
select distinct videogame_id
from category_videogame
where category_id in (2, 6)

8- Selezionare tutte le recensioni con voto compreso tra 2 e 4 (2947)
select *
from reviews
where rating >= 2 AND rating <= 4

9- Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020 (46)
select *
from videogames
where year(release_date) = 2020

10- Selezionare gli id dei videogame che hanno ricevuto almeno una recensione da 5 stelle, mostrandoli una sola volta (443)
select distinct videogame_id
from reviews
where rating = 5

*********** BONUS ***********
11- Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 (review number = 12, avg_rating = 3)
select count(rating), avg(rating)
from reviews
where videogame_id = 412

12- Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018 (13)
select count(*)
from videogames
where software_house_id = 1 and year(release_date) = 2018

### Query con group by

1- Contare quante software house ci sono per ogni paese (3)
select country, count(*)
from software_houses
group by country

2- Contare quante recensioni ha ricevuto ogni videogioco (del videogioco vogliamo solo l'ID) (500)
select videogame_id, count(*)
from reviews
group by videogame_id

3- Contare quanti videogiochi hanno ciascuna classificazione PEGI (della classificazione PEGI vogliamo solo l'ID) (13)
select pegi_label_id, count(*)
from pegi_label_videogame
group by pegi_label_id

4- Mostrare il numero di videogiochi rilasciati ogni anno (11)
select year(release_date), count(*)
from videogames
group by year(release_date)

5- Contare quanti videogiochi sono disponbiili per ciascun device (del device vogliamo solo l'ID) (7)
select device_id, count(*)
from device_videogame
group by device_id

6- Ordinare i videogame in base alla media delle recensioni (del videogioco vogliamo solo l'ID) (500)
select videogame_id, avg(rating)
from reviews
group by videogame_id
order by avg(rating)

### Query con join

1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)
select distinct players.*
from players
join reviews on player_id = players.id

2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)
select distinct videogames.name
from tournaments
join tournament_videogame on tournaments.id = tournament_videogame.tournament_id
join videogames on tournament_videogame.videogame_id = videogames.id
where tournaments.year = 2016;

3- Mostrare le categorie di ogni videogioco (1718)
select videogames.id, videogames.name, categories.name
from videogames 
join category_videogame on videogames.id = category_videogame.videogame_id
join categories on category_videogame.category_id = categories.id;

4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)
select distinct software_houses.*
from videogames
join software_houses on videogames.id = software_house_id
where year(videogames.release_date) > 2020

5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)
select awards.*
from software_houses
join videogames on software_houses.id = videogames.software_house_id
join award_videogame on videogames.id = award_videogame.videogame_id
join awards on award_videogame.award_id = awards.id

6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)
select distinct categories.name, pegi_labels.name, videogames.name
from videogames
join reviews on videogames.id = reviews.videogame_id
join category_videogame on videogames.id = category_videogame.videogame_id
join categories on category_videogame.category_id = categories.id
join pegi_label_videogame on videogames.id = pegi_label_videogame.videogame_id
join pegi_labels on pegi_label_videogame.pegi_label_id = pegi_labels.id
where reviews.rating in (4, 5)

7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)
select distinct videogames.name, videogames.id
from players
join player_tournament on players.id = player_tournament.player_id
join tournaments on tournaments.id = player_tournament.tournament_id
join tournament_videogame on tournaments.id = tournament_videogame.tournament_id
join videogames on tournament_videogame.videogame_id = videogames.id
where players.name like 's%'

8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36)
select tournaments.city
from videogames
join award_videogame on videogames.id = award_videogame.videogame_id
join awards on awards.id = award_videogame.award_id
join tournament_videogame on tournament_videogame.videogame_id = videogames.id
join tournaments on tournaments.id = tournament_videogame.tournament_id
where awards.name like 'gioco dell''anno' and award_videogame.year = 2018

9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)
select players.id, players.name
from awards
join award_videogame on award_videogame.award_id = awards.id
join videogames on videogames.id = award_videogame.videogame_id
join tournament_videogame on tournament_videogame.videogame_id = videogames.id
join tournaments on tournaments.id = tournament_videogame.tournament_id
join player_tournament on player_tournament.tournament_id = tournaments.id
join players on players.id = player_tournament.player_id
where awards.name like 'gioco più atteso' and award_videogame.year = 2018 
and tournaments.year = 2019

*********** BONUS ***********
10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)select software_houses.*, videogames.*
from videogames
join software_houses on videogames.software_house_id = software_houses.id
where videogames.release_date =
	(
	select min(videogames.release_date)
	from videogames
	)

11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : 398)
select videogames.id, videogames.name, videogames.release_date, review_counts.total_reviews
from videogames
join (
        select reviews.videogame_id, count(*) as total_reviews
        from reviews
        group by reviews.videogame_id
        order by total_reviews desc
        offset 0 rows fetch first 1 rows only
    ) as review_counts on videogames.id = review_counts.videogame_id;

12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : 1)
select software_houses.id, count(*) as total_awards
from software_houses
join videogames on software_houses.id = videogames.software_house_id
join award_videogame on award_videogame.videogame_id = videogames.id
where award_videogame.year = 2015 or award_videogame.year = 2016 
group by software_houses.id, software_houses.name
order by total_awards desc
offset 0 rows fetch first 1 rows only

13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 2 (10)
select distinct categories.name, categories.id
from videogames
join category_videogame on videogames.id = category_videogame.videogame_id
join categories on category_videogame.category_id = categories.id
join reviews on videogames.id = reviews.videogame_id
group by categories.id, categories.name,  videogames.id
having avg(reviews.rating) < 2
```